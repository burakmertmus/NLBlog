@using NLBlog.Shared.Utilities.Results.ComplexTypes
@model NLBlog.Entities.Dtos.CategoryListDto
@{
    Layout = "_Layout";
    ViewBag.Title = "Kategoriler Index";
}

@if (Model.ResultStatus == ResultStatus.Success)
{
    <div id="modalPlaceHolder" aria-hidden="true"></div>
    <div class="card mb-4 mt-2">
        <div class="card-header">
            <i class="fas fa-table mr-1"></i>
            Kategoriler Tablosu
        </div>
        <div class="card-body">
            <div class="spinner-border" role="status" style="display:none;">
                <span class="sr-only">Yükleniyor...</span>
            </div>
            <div class="table-responsive">
                <table class="table table-bordered" id="categoriesTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Adı</th>
                            <th>Açıklaması</th>
                            <th>Aktif Mi?</th>
                            <th>Silinmiş Mi?</th>
                            <th>Not</th>
                            <th>Oluşturulma Tarihi</th>
                            <th>Oluşturan Kullanıcı</th>
                            <th>Son Düzenleme Tarihi</th>
                            <th>Son Düzenleyen Kullanıcı Adı</th>
                            <th>İşlemler</th>

                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Id</th>
                            <th>Adı</th>
                            <th>Açıklaması</th>
                            <th>Aktif Mi?</th>
                            <th>Silinmiş Mi?</th>
                            <th>Not</th>
                            <th>Oluşturulma Tarihi</th>
                            <th>Oluşturan Kullanıcı</th>
                            <th>Son Düzenleme Tarihi</th>
                            <th>Son Düzenleyen Kullanıcı Adı</th>
                            <th>İşlemler</th>
                        </tr>
                    </tfoot>
                    <tbody>
                        @foreach (var category in Model.Categories)
                        {
                            <tr name="@category.Id">
                                <td>@category.Id</td>
                                <td>@category.Name</td>
                                <td>@category.Description</td>
                                <td>@category.IsActive</td>
                                <td>@category.IsDeleted</td>
                                <td>@category.Note</td>
                                <td>@category.CreatedDate.ToShortDateString()</td>
                                <td>@category.CreatedByName</td>
                                <td>@category.ModifiedDate.ToShortDateString()</td>
                                <td>@category.ModifiedByName</td>
                                <td>
                                    <button class="btn btn-primary btn-sm"><span class="fas fa-edit"></span> Düzenle</button>
                                    <button class="btn btn-danger btn-sm btn-delete" data-id="@category.Id"><span class="fas fa-minus-circle"></span> Sil</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@if (Model.ResultStatus == ResultStatus.Error) {
    <div class="alert alert-danger mt-3">
        @Model.Message<br />
        Dashboard sayfasına geri dönmek için lütfen <a class="alert-link" asp-area="Admin" asp-controller="Home" asp-action="Index"></a> tıklayınız
    </div>
}

    @section Scripts{
        <script>
            $(document).ready(function () {
                $('#categoriesTable').DataTable({
                    dom:
                        "<'row'<'col-sm-3'l><'col-sm-6 text-center'B><'col-sm-3'f>>" +
                        "<'row'<'col-sm-12'tr>>" +
                        "<'row'<'col-sm-5'i><'col-sm-7'p>>",
                    buttons: [
                        {
                            text: 'Ekle',
                            attr: {
                                id: "btnAdd",
                            },
                            className: 'btn btn-success',
                            action: function (e, dt, node, config) {

                            }
                        },
                        {
                            text: 'Yenile',
                            className: 'btn btn-warning',
                            action: function (e, dt, node, config) {
                                $.ajax({
                                    type: 'GET',
                                    url: '@Url.Action("GetAllCategories", controller:"Category")',
                                    contentType: "application/json",
                                    beforeSend: function () {
                                        $('#categoriesTable').hide();
                                        $('.spinner-border').show();
                                    },
                                    success: function (data) {
                                        const categoryListDto = jQuery.parseJSON(data);
                                        console.log(categoryListDto);
                                        if (categoryListDto.ResultStatus === 0) {
                                            let tableBody= "";
                                            $.each(categoryListDto.Categories.$values, function (index, category) {
                                                tableBody +=
                                                    `<tr>
                                                    <td>${category.Id}</td>
                                                    <td>${category.Name}</td>
                                                    <td>${category.Description}</td>
                                                    <td>${convertFirstLetterToUpperCase(category.IsActive.toString())}</td>
                                                    <td>${convertFirstLetterToUpperCase(category.IsDeleted.toString())}</td>
                                                    <td>${category.Note}</td>
                                                    <td>${convertToShortDate(category.CreatedDate)}</td>
                                                    <td>${category.CreatedByName}</td>
                                                    <td>${convertToShortDate(category.ModifiedDate)} </td>
                                                    <td>${category.ModifiedByName}</td>
                                                </tr>
                                                `
                                            });
                                            $('categoriesTable > tbody').replaceWith(tableBody);
                                            $('.spinner-border').hide();
                                            $('#categoriesTable').fadeIn(1400);
                                        }
                                        else {
                                            toastr.error(`${categoryListDto.Message}`,"İşlem başarısız !");
                                        }
                                        @* if state ends there*@
                                    },
                                    error: function (err) {
                                        console.log(err);
                                        toastr.error(`${err.statusText}`, "İşlem başarısız !");
                                    }

                                });
                            }
                        }
                    ],
                    language:
                    {
                        "emptyTable": "Tabloda herhangi bir veri mevcut değil",
                        "info": "_TOTAL_ kayıttan _START_ - _END_ arasındaki kayıtlar gösteriliyor",
                        "infoEmpty": "Kayıt yok",
                        "infoFiltered": "(_MAX_ kayıt içerisinden bulunan)",
                        "infoThousands": ".",
                        "lengthMenu": "Sayfada _MENU_ kayıt göster",
                        "loadingRecords": "Yükleniyor...",
                        "processing": "İşleniyor...",
                        "search": "Ara:",
                        "zeroRecords": "Eşleşen kayıt bulunamadı",
                        "paginate": {
                            "first": "İlk",
                            "last": "Son",
                            "next": "Sonraki",
                            "previous": "Önceki"
                        },
                        "aria": {
                            "sortAscending": ": artan sütun sıralamasını aktifleştir",
                            "sortDescending": ": azalan sütun sıralamasını aktifleştir"
                        },
                        "select": {
                            "rows": {
                                "_": "%d kayıt seçildi",
                                "1": "1 kayıt seçildi"
                            },
                            "cells": {
                                "1": "1 hücre seçildi",
                                "_": "%d hücre seçildi"
                            },
                            "columns": {
                                "1": "1 sütun seçildi",
                                "_": "%d sütun seçildi"
                            }
                        },
                        "autoFill": {
                            "cancel": "İptal",
                            "fillHorizontal": "Hücreleri yatay olarak doldur",
                            "fillVertical": "Hücreleri dikey olarak doldur",
                            "fill": "Bütün hücreleri <i>%d<\/i> ile doldur"
                        },
                        "buttons": {
                            "collection": "Koleksiyon <span class=\"ui-button-icon-primary ui-icon ui-icon-triangle-1-s\"><\/span>",
                            "colvis": "Sütun görünürlüğü",
                            "colvisRestore": "Görünürlüğü eski haline getir",
                            "copySuccess": {
                                "1": "1 satır panoya kopyalandı",
                                "_": "%ds satır panoya kopyalandı"
                            },
                            "copyTitle": "Panoya kopyala",
                            "csv": "CSV",
                            "excel": "Excel",
                            "pageLength": {
                                "-1": "Bütün satırları göster",
                                "_": "%d satır göster"
                            },
                            "pdf": "PDF",
                            "print": "Yazdır",
                            "copy": "Kopyala",
                            "copyKeys": "Tablodaki veriyi kopyalamak için CTRL veya u2318 + C tuşlarına basınız. İptal etmek için bu mesaja tıklayın veya escape tuşuna basın."
                        },
                        "searchBuilder": {
                            "add": "Koşul Ekle",
                            "button": {
                                "0": "Arama Oluşturucu",
                                "_": "Arama Oluşturucu (%d)"
                            },
                            "condition": "Koşul",
                            "conditions": {
                                "date": {
                                    "after": "Sonra",
                                    "before": "Önce",
                                    "between": "Arasında",
                                    "empty": "Boş",
                                    "equals": "Eşittir",
                                    "not": "Değildir",
                                    "notBetween": "Dışında",
                                    "notEmpty": "Dolu"
                                },
                                "number": {
                                    "between": "Arasında",
                                    "empty": "Boş",
                                    "equals": "Eşittir",
                                    "gt": "Büyüktür",
                                    "gte": "Büyük eşittir",
                                    "lt": "Küçüktür",
                                    "lte": "Küçük eşittir",
                                    "not": "Değildir",
                                    "notBetween": "Dışında",
                                    "notEmpty": "Dolu"
                                },
                                "string": {
                                    "contains": "İçerir",
                                    "empty": "Boş",
                                    "endsWith": "İle biter",
                                    "equals": "Eşittir",
                                    "not": "Değildir",
                                    "notEmpty": "Dolu",
                                    "startsWith": "İle başlar"
                                },
                                "array": {
                                    "contains": "İçerir",
                                    "empty": "Boş",
                                    "equals": "Eşittir",
                                    "not": "Değildir",
                                    "notEmpty": "Dolu",
                                    "without": "Hariç"
                                }
                            },
                            "data": "Veri",
                            "deleteTitle": "Filtreleme kuralını silin",
                            "leftTitle": "UrlKriteri dışarı çıkart",
                            "logicAnd": "ve",
                            "logicOr": "veya",
                            "rightTitle": "Kriteri içeri al",
                            "title": {
                                "0": "Arama Oluşturucu",
                                "_": "Arama Oluşturucu (%d)"
                            },
                            "value": "Değer",
                            "clearAll": "Filtreleri Temizle"
                        },
                        "searchPanes": {
                            "clearMessage": "Hepsini Temizle",
                            "collapse": {
                                "0": "Arama Bölmesi",
                                "_": "Arama Bölmesi (%d)"
                            },
                            "count": "{total}",
                            "countFiltered": "{shown}\/{total}",
                            "emptyPanes": "Arama Bölmesi yok",
                            "loadMessage": "Arama Bölmeleri yükleniyor ...",
                            "title": "Etkin filtreler - %d"
                        },
                        "thousands": ".",
                        "datetime": {
                            "amPm": [
                                "öö",
                                "ös"
                            ],
                            "hours": "Saat",
                            "minutes": "Dakika",
                            "next": "Sonraki",
                            "previous": "Önceki",
                            "seconds": "Saniye",
                            "unknown": "Bilinmeyen",
                            "weekdays": {
                                "6": "Paz",
                                "5": "Cmt",
                                "4": "Cum",
                                "3": "Per",
                                "2": "Çar",
                                "1": "Sal",
                                "0": "Pzt"
                            },
                            "months": {
                                "9": "Ekim",
                                "8": "Eylül",
                                "7": "Ağustos",
                                "6": "Temmuz",
                                "5": "Haziran",
                                "4": "Mayıs",
                                "3": "Nisan",
                                "2": "Mart",
                                "11": "Aralık",
                                "10": "Kasım",
                                "1": "Şubat",
                                "0": "Ocak"
                            }
                        },
                        "decimal": ",",
                        "editor": {
                            "close": "Kapat",
                            "create": {
                                "button": "Yeni",
                                "submit": "Kaydet",
                                "title": "Yeni kayıt oluştur"
                            },
                            "edit": {
                                "button": "Düzenle",
                                "submit": "Güncelle",
                                "title": "Kaydı düzenle"
                            },
                            "error": {
                                "system": "Bir sistem hatası oluştu (Ayrıntılı bilgi)"
                            },
                            "multi": {
                                "info": "Seçili kayıtlar bu alanda farklı değerler içeriyor. Seçili kayıtların hepsinde bu alana aynı değeri atamak için buraya tıklayın; aksi halde her kayıt bu alanda kendi değerini koruyacak.",
                                "noMulti": "Bu alan bir grup olarak değil ancak tekil olarak düzenlenebilir.",
                                "restore": "Değişiklikleri geri al",
                                "title": "Çoklu değer"
                            },
                            "remove": {
                                "button": "Sil",
                                "confirm": {
                                    "_": "%d adet kaydı silmek istediğinize emin misiniz?",
                                    "1": "Bu kaydı silmek istediğinizden emin misiniz?"
                                },
                                "submit": "Sil",
                                "title": "Kayıtları sil"
                            }
                        }
                    }




                });

                @* Data Table ends here *@
                @* Ajax GET / Getting the _CategoryAddPartial as Modal form starts here *@

                $(function () {
                    let url = '@Url.Action("Add",controller:"Category")';
                    let placeHolderDiv = $('#modalPlaceHolder');

                    $('#btnAdd').click(function () {
                        $.get(url).done(function (data) {
                            placeHolderDiv.html(data);
                            placeHolderDiv.find(".modal").modal('show');
                        });
                    });
                    @* Ajax GET / Getting the _CategoryAddPartial as Modal form ends here *@
                    @* Ajax POST / Posting the FormData as CategoryAddDto starts here *@
                    placeHolderDiv.on('click',
                        '#btnSave',
                        function (event) {
                            event.preventDefault();
                            let form = $('#form-category-add');
                            let actionUrl = form.attr('action');
                            let dataToSend = form.serialize();
                            $.post(actionUrl, dataToSend).done(function (data) {
                                let categoryAddAjaxModel = jQuery.parseJSON(data);
                                console.log(categoryAddAjaxModel);
                                let newFormBody = $('.modal-body', categoryAddAjaxModel.CategoryAddPartial);
                                placeHolderDiv.find('.modal-body').replaceWith(newFormBody);

                                let isValid = newFormBody.find('[name="IsValid"]').val() === 'True';
                                console.log(isValid);
                                if (isValid) {

                                    placeHolderDiv.find('.modal').modal('hide');
                                    let newTableRow = `<tr>
                                <td>${category.Id}</td>
                                <td>${category.Name}</td>
                                <td>${category.Description}</td>
                                <td>${convertFirstLetterToUpperCase(category.IsActive.toString())}</td>
                                <td>${convertFirstLetterToUpperCase(category.IsDeleted.toString())}</td>
                                <td>${category.Note}</td>
                                <td>${convertToShortDate(category.CreatedDate)}</td>
                                <td>${category.CreatedByName}</td>
                                <td>${convertToShortDate(category.ModifiedDate)} </td>
                                <td>${category.ModifiedByName}</td>
                                </tr>`;

                                    let newTableRowObject = $(newTableRow);
                                    newTableRowObject.hide();
                                    $('#categoriesTable').append(newTableRowObject);
                                    newTableRowObject.fadeIn(2000);
                                    toastr.success(`${categoryAddAjaxModel.CategoryDto.Message}`, 'Başarılı İşlem!');
                                }
                                else {
                                    let summaryText = "";
                                    $('#validation-summary > ul > li').each(function () {
                                        let text = $(this).text();
                                        summaryText=validation = `*${text}\n`;
                                    });
                                    toastr.warning(summaryText);
                                }
                            });
                        });
                    @*Ajax POST / Posting the FormData ends here *@
                    @* Ajax POST / Deleting the category starts here *@
                    $(document).on('click',
                        '.btn-delete',
                        function () {
                            event.preventDefault();
                            const id = $(this).attr('data-id');
                            Swal.fire({
                                title: 'Silmek istediğinize emin misiniz ?',
                                text: "Seçili kategori silinicektir!",
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Evet Silmek İstiyorum.',
                                cancelButtonText: 'Hayır, Silmek istemiyorum.'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $.ajax({
                                        type: 'POST',
                                        dataType: 'json',
                                        data: { categoryId: id },
                                        url: '@Url.Action("Delete", "Category")',
                                        success: function (data) {
                                            const result = jQuery.parseJSON(data);
                                            if (result.ResultStatus === 0) {
                                                Swal.fire(
                                                    'Silindi!',
                                                    'Seçili kategori başarıyla silinmiştir.',
                                                    'success'
                                                );
                                                const tableRow = $(`[name="${id}"]`);
                                                tableRow.fadeOut(3500);
                                            }
                                            else {
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Bir hata oluştu...',
                                                    text: `${result.Message}`
                                                })
                                            }
                                        },
                                        error: function (err) { console.log(err); }
                                    });
                                }
                            })
                    });
                });

            });
        </script>

    }
